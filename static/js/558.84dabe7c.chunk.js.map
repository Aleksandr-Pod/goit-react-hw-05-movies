{"version":3,"file":"static/js/558.84dabe7c.chunk.js","mappings":"sQAAA,IAAMA,EAAM,6BACNC,EAAU,mCAGHC,EAAe,WAE1B,OADAC,QAAQC,IAAI,6BACLC,MAAM,GAAD,OAAIL,EAAJ,yCAAwCC,EAAxC,iBAJD,IAKRK,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZC,OAAM,SAAAC,GAAG,OAAIA,EAAIC,YAGTC,EAAc,SAACC,GAE1B,OADAV,QAAQC,IAAI,4BACLC,MAAM,GAAD,OAAIL,EAAJ,mCAAkCC,EAAlC,kBAAmDY,EAAnD,iBAXD,IAYRP,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZC,OAAM,SAAAC,GAAG,OAAIA,EAAIC,YAGTG,EAAiB,SAACC,GAE7B,OADAZ,QAAQC,IAAI,oBACLC,MAAM,GAAD,OAAIL,EAAJ,oBAAmBe,EAAnB,oBAAsCd,IAC/CK,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZC,OAAM,SAAAC,GAAG,OAAIA,EAAIC,YAETK,EAAe,SAACD,GAE3B,OADAZ,QAAQC,IAAI,qBACLC,MAAM,GAAD,OAAIL,EAAJ,oBAAmBe,EAAnB,4BAA8Cd,IACvDK,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZC,OAAM,SAAAC,GAAG,OAAIA,EAAIC,YAETM,EAAY,SAACF,GAExB,OADAZ,QAAQC,IAAI,mBACLC,MAAM,GAAD,OAAIL,EAAJ,oBAAmBe,EAAnB,4BAA8Cd,IACvDK,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZC,OAAM,SAAAC,GAAG,OAAIA,EAAIC,a,6ICnBP,SAASO,IACtB,OAA4BC,EAAAA,EAAAA,YAA5B,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAoCP,EAAAA,EAAAA,WAAS,kCAAMM,EAAaE,IAAI,iBAAvB,QAAoC,MAAjF,eAAOC,EAAP,KAAmBC,EAAnB,MAEAC,EAAAA,EAAAA,YAAU,WACHF,EAAWG,QAChBC,EAAAA,GAAqBJ,GAClBtB,MAAK,SAAA2B,GACJ,GAAKA,EAAKC,QAAV,CAIA,GAA2B,IAAvBD,EAAKE,cAGP,OAFAC,IAAAA,MAAa,mBACbf,IAGJA,EAAUY,EAAKC,SACfR,EAAgB,CAAEW,OAAQT,SATtBQ,IAAAA,MAAaH,QAWlB,CAACL,EAAYF,IAShB,OACE,iCACE,6BACE,iDACE,kBAAOY,KAAK,OAAOhB,MAAOA,EAAOiB,SAXxB,SAAAC,GAAC,OAAIjB,EAASiB,EAAEC,OAAOnB,cAalC,mBAAQoB,QAXG,SAAAF,GACfA,EAAEG,iBACFd,EAAcP,IASV,uBAEDF,IACC,SAAC,IAAD,CACEwB,MAAM,kBACNxB,OAAQA,EACRyB,QAAS,QAlDnBT,IAAAA,QAAiB,CACb,aAAe,EACf,cAAiB,iBACjB,QAAW,OACX,gBAAmB,S,+ECTVU,EAAYC,EAAAA,GAAAA,GAAH,2GAMTC,EAAcD,EAAAA,GAAAA,GAAH,4CAGXE,EAAaF,EAAAA,GAAAA,GAAH,yH,kBCTR,SAASG,EAAT,GAAiD,IAA3B9B,EAA0B,EAA1BA,OAAQwB,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAChD,OACI,UAACC,EAAD,YACI,SAACE,EAAD,UAAcJ,IACbxB,EAAO+B,KAAI,SAAAC,GAAE,OACV,SAACH,EAAD,WACI,SAAC,KAAD,CAASI,GAAE,UAAKR,GAAL,OAAeO,EAAGE,IAA7B,SAAoCF,EAAGR,SAD1BQ,EAAGE","sources":["components/APIfetch/APIfetch.js","components/Movies.js","components/Movies-styled.js","components/MoviesList.js"],"sourcesContent":["const URL = 'https://api.themoviedb.org';\nconst API_KEY = 'e2b1fd67e69bae9f083d3c611e2b6f41';\nconst page = 1;\n\nexport const fetchForADay = () => {\n  console.log(\"fetching today's movies..\");\n  return fetch(`${URL}/3/trending/movie/day?api_key=${API_KEY}&page=${page}`)\n    .then(r => r.json())\n    .catch(err => err.message)\n}\n\nexport const fetchSearch = (query) => {\n  console.log(\"fetching by searchName..\");\n  return fetch(`${URL}/3/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`)\n    .then(r => r.json())\n    .catch(err => err.message)\n}\n\nexport const fetchMovieById = (movieId) => {\n  console.log(\"fetching by Id..\");\n  return fetch(`${URL}/3/movie/${movieId}?api_key=${API_KEY}`)\n    .then(r => r.json())\n    .catch(err => err.message);\n}\nexport const fetchReviews = (movieId) => {\n  console.log(\"fetching Review..\");\n  return fetch(`${URL}/3/movie/${movieId}/reviews?api_key=${API_KEY}`)\n    .then(r => r.json())\n    .catch(err => err.message);\n}\nexport const fetchCast = (movieId) => {\n  console.log(\"fetching Cast..\");\n  return fetch(`${URL}/3/movie/${movieId}/credits?api_key=${API_KEY}`)\n    .then(r => r.json())\n    .catch(err => err.message);\n}\n\n\n\n    ","import { useState, useEffect } from \"react\";\nimport * as movieApi from './APIfetch/APIfetch';\nimport { useSearchParams } from 'react-router-dom';\nimport toastr from \"toastr\";\n// import { MoviesBox, MoviesTitle, MoviesItem } from './Movies-styled';\n// import { NavLink } from 'react-router-dom';\nimport MoviesList from \"./MoviesList\";\n\ntoastr.options = {\n    \"progressBar\": true,\n    \"positionClass\": \"toast-top-left\",\n    \"timeOut\": \"3000\",\n    \"extendedTimeOut\": \"1000\",\n}\n\nexport default function MoviesPage() {\n  const [movies, setMovies] = useState();\n  const [value, setValue] = useState(\"\");\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const [searchName, setSearchName] = useState(() => searchParams.get(\"search\") ?? \"\" );\n\n  useEffect(() => {\n    if (!searchName.trim()) return;\n    movieApi.fetchSearch(searchName)\n      .then(data => {\n        if (!data.results) {\n          toastr.error(data); // ошибка сети\n          return;\n        }\n        if (data.total_results === 0) {\n          toastr.error(\"No results\"); // нет результата\n          setMovies();\n          return;\n        }\n      setMovies(data.results);\n      setSearchParams({ search: searchName });\n  })\n  }, [searchName, setSearchParams]);\n\n  const onChange = e => setValue(e.target.value);\n  \n  const onSubmit = e => {\n    e.preventDefault();\n    setSearchName(value);\n  }\n  \n  return (\n    <>\n      <form>\n        <label>Imput movie name \n          <input type=\"text\" value={value} onChange={onChange}></input>\n        </label>\n        <button onClick={onSubmit}>Search</button>  \n      </form>\n      {movies &&\n        <MoviesList\n          title=\"Searched movies\"\n          movies={movies}\n          prePath={''} /> \n        // <MoviesBox>\n        //   <MoviesTitle>Search Movies</MoviesTitle>\n        //   {movies.map(el => (\n        //     <MoviesItem key={el.id}>\n        //       <NavLink to={`${el.id}`}>{el.title}</NavLink>\n        //     </MoviesItem>\n        //   ))}\n        // </MoviesBox>\n      }\n      </>\n  )\n}","import styled from 'styled-components';\n\n\nexport const MoviesBox = styled.ul`\nmargin: 0 auto;\npadding: 10px;\nmax-width: 800px;\nbackground-color: lightgreen;\n` \nexport const MoviesTitle = styled.h3`\nmargin-left: 30px;\n`\nexport const MoviesItem = styled.li`\nlist-style: none;\nmargin: 5px 0;\npadding: 5px;\nborder: 1px solid green;\nborder-radius: 5px;\n`","import { MoviesBox, MoviesTitle, MoviesItem } from './Movies-styled';\nimport { NavLink } from 'react-router-dom';\n\nexport default function MoviesList({ movies, title, prePath }) {\n    return (\n        <MoviesBox>\n            <MoviesTitle>{title}</MoviesTitle>\n            {movies.map(el => (\n                <MoviesItem key={el.id}>\n                    <NavLink to={`${prePath}${el.id}`}>{el.title}</NavLink>\n                </MoviesItem>\n            ))}\n        </MoviesBox>\n    )\n}"],"names":["URL","API_KEY","fetchForADay","console","log","fetch","then","r","json","catch","err","message","fetchSearch","query","fetchMovieById","movieId","fetchReviews","fetchCast","MoviesPage","useState","movies","setMovies","value","setValue","useSearchParams","searchParams","setSearchParams","get","searchName","setSearchName","useEffect","trim","movieApi","data","results","total_results","toastr","search","type","onChange","e","target","onClick","preventDefault","title","prePath","MoviesBox","styled","MoviesTitle","MoviesItem","MoviesList","map","el","to","id"],"sourceRoot":""}